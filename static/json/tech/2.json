{
  "title": "【コピペですぐに使える】画像圧縮機能",
  "created_at": "2020-03-02T00:00:00.000Z",
  "image": "img1.jpg",
  "bodyContent": "#【コピペですぐに使える】画像圧縮機能\n\n##Githubはこちら\nhttps://github.com/RantaroTech/imagemin_gulp\n\n### Githubからクローンした場合の手順\nnodeなどの環境構築が既にできていれば下記の3ステップで画像圧縮ができます\n\n1.クローンする\n(もしもURL変わってたらGithubからクローンしてください)\n\n```\n git clone https://github.com/RantaroTech/imagemin_gulp.git\n```\n\n2.nodemoduleをインストール\n\n```\n git clone https://github.com/RantaroTech/imagemin_gulp.git\n```\n\n3.実行\n\n```\ngulp img\n```\n\n## Nodeの環境などが用意できていない場合\n下記の1~11のコマンドを実行すると画像の圧縮がすぐに行えるようになります\n\n自分で導入する際にgulpやimageminを調べたりして\n大変だったのでコピペだけで使えるようにまとめました。\n\nターミナルでコマンドを実行してください。\n\n##1 - nodebrewをインストール \nnodebrewをインストールするには[homebrew](https://brew.sh/index_ja)をインストールしてください。\n(デザイナーさんなど普段nodeを使用してない方はnodebrewのインストールでエラーになるかも)\n\n```\nbrew install nodebrew\n```\n##2 - yarnをインストール\n\n```\nbrew install yarn\n```\n##3 - npm init (npmを使うための設定)\n```\nnpm init\n```\n##4 - srcファイルを作成\n```\nmkdir src\n```\n##5 - distファイルを作成\n```\nmkdir dist\n```\n##6 - gulpfile.jsを作成\n```\ntouch gulpfile.js\n```\n##7 - gulpをインストール\n```\nnpm install gulp\n```\n##8 - imageminをインストール\n\n[imagemin](https://www.npmjs.com/package/gulp-imagemin)\n\n```\nnpm i gulp-imagemin\n```\n##9 - imagemin-mozjpegをインストール\n[imagemin-mozjpeg](https://www.npmjs.com/package/imagemin-mozjpeg)\n\n```\nnpm i imagemin-mozjpeg\n```\n##10 - imagemin-pngquantをインストール\n\n[imagemin-pngquant](https://www.npmjs.com/package/imagemin-pngquant)\n\n```\nnpm i imagemin-pngquant\n```\n\n##ここまで実行するとこのようなディレクトリ構造になっています。\n\n\n<img width=\"409\" alt=\"スクリーンショット 2019-02-09 17.35.34.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/199085/1b1523f4-4bdc-e7e4-d581-fcf16f6e8509.png\">\n\n```\n├ dist　　　　　　　　　　　　　　　　　　 ・圧縮した画像が置かれる　(ディストリビューションの略)\n├ gulpfile.js                        ・gulｐの設定を行う　　　　　　　　　　\n├ node_modules                       ・nodeの設定が補完される\n├ package-lock.json                  ・nodeのバージョンを表記する\n├ package.json                       ・nodeの設定を記述する\n└ src                                ・圧縮前の画像を保管する　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n```\n\n\n\n##11 - gulpfile.jsに下記をコピぺする\n```gulpfile.js\nconst gulp = require('gulp');\nconst distDir = 'dist';\nconst srcDir = 'src';\nconst imagemin = require('gulp-imagemin');\nconst pngquant = require('imagemin-pngquant');\nconst mozjpeg = require('imagemin-mozjpeg');\n\ngulp.task('img', () => {\n  return gulp.src(srcDir + '/*.{png,jpg,gif,PNG,JPG,GIF}')\n    .pipe(imagemin([\n      pngquant('65-80'),\n      mozjpeg({\n        quality: 80, \n        progressive: true\n      }),\n      imagemin.svgo(),\n      imagemin.optipng(),\n      imagemin.gifsicle()\n    ]))\n    .pipe(gulp.dest(distDir));\n});\n```\n\n##実行\n```\ngulp img\n```\n###png画像を圧縮\n\n####圧縮前 (37KB)\n\n\n![test.png](https://qiita-image-store.s3.amazonaws.com/0/199085/aea5a96c-8fe3-9cae-69e2-a76890232e1d.png)\n\n```\nUsing gulpfile ~/test_gulp/gulpfile.js\nStarting 'img'...\ngulp-imagemin: Minified 1 image (saved 25 kB - 67%)\nFinished 'img' after 527 ms\n```\n\n####圧縮後 (12KB)\n![test.png](https://qiita-image-store.s3.amazonaws.com/0/199085/14039952-73fb-1b0f-bb63-7a9d4f5146a0.png)\n\n###jpg画像を圧縮\nスマホで撮った写真を圧縮してみる。\n\n####圧縮前 (1.9MB)\n\n\n![test.jpg](https://qiita-image-store.s3.amazonaws.com/0/199085/ed453547-6e43-01ef-afa3-8e6a81c2201b.jpeg)\n\n\n\n```\nUsing gulpfile ~/test_gulp/gulpfile.js\nStarting 'img'...\ngulp-imagemin: Minified 1 image (saved 25 kB - 67%)\nFinished 'img' after 571 ms\n```\n\n####圧縮後 (1.2MB)\n\n![test.jpg](https://qiita-image-store.s3.amazonaws.com/0/199085/69530871-5b4e-1b28-64ed-06d9c79aed45.jpeg)\n\n##まとめ\n画像容量を6割近く削減することができました。\nデザイナーではない素人目ですが画像の劣化などあまり気になりませんでした。\n\n・基本的に `gulpfile.js` を変更すれば設定を変更可能です。\n・細かい圧縮の設定などを変更したい場合はリンクの公式のオプションを参考にしてみてください。\n\nここまでお読みいただきありがとうございました。\n\n雑談：iPhoneXの画質すごい",
  "bodyHtml": "<p>#【コピペですぐに使える】画像圧縮機能</p>\n<p>##Githubはこちら\nhttps://github.com/RantaroTech/imagemin_gulp</p>\n<h3>Githubからクローンした場合の手順</h3>\n<p>nodeなどの環境構築が既にできていれば下記の3ステップで画像圧縮ができます</p>\n<p>1.クローンする\n(もしもURL変わってたらGithubからクローンしてください)</p>\n<pre><code> git clone https://github.com/RantaroTech/imagemin_gulp.git\n</code></pre>\n<p>2.nodemoduleをインストール</p>\n<pre><code> git clone https://github.com/RantaroTech/imagemin_gulp.git\n</code></pre>\n<p>3.実行</p>\n<pre><code>gulp img\n</code></pre>\n<h2>Nodeの環境などが用意できていない場合</h2>\n<p>下記の1~11のコマンドを実行すると画像の圧縮がすぐに行えるようになります</p>\n<p>自分で導入する際にgulpやimageminを調べたりして\n大変だったのでコピペだけで使えるようにまとめました。</p>\n<p>ターミナルでコマンドを実行してください。</p>\n<p>##1 - nodebrewをインストール\nnodebrewをインストールするには<a href=\"https://brew.sh/index_ja\">homebrew</a>をインストールしてください。\n(デザイナーさんなど普段nodeを使用してない方はnodebrewのインストールでエラーになるかも)</p>\n<pre><code>brew install nodebrew\n</code></pre>\n<p>##2 - yarnをインストール</p>\n<pre><code>brew install yarn\n</code></pre>\n<p>##3 - npm init (npmを使うための設定)</p>\n<pre><code>npm init\n</code></pre>\n<p>##4 - srcファイルを作成</p>\n<pre><code>mkdir src\n</code></pre>\n<p>##5 - distファイルを作成</p>\n<pre><code>mkdir dist\n</code></pre>\n<p>##6 - gulpfile.jsを作成</p>\n<pre><code>touch gulpfile.js\n</code></pre>\n<p>##7 - gulpをインストール</p>\n<pre><code>npm install gulp\n</code></pre>\n<p>##8 - imageminをインストール</p>\n<p><a href=\"https://www.npmjs.com/package/gulp-imagemin\">imagemin</a></p>\n<pre><code>npm i gulp-imagemin\n</code></pre>\n<p>##9 - imagemin-mozjpegをインストール\n<a href=\"https://www.npmjs.com/package/imagemin-mozjpeg\">imagemin-mozjpeg</a></p>\n<pre><code>npm i imagemin-mozjpeg\n</code></pre>\n<p>##10 - imagemin-pngquantをインストール</p>\n<p><a href=\"https://www.npmjs.com/package/imagemin-pngquant\">imagemin-pngquant</a></p>\n<pre><code>npm i imagemin-pngquant\n</code></pre>\n<p>##ここまで実行するとこのようなディレクトリ構造になっています。</p>\n<p>&lt;img width=&quot;409&quot; alt=&quot;スクリーンショット 2019-02-09 17.35.34.png&quot; src=&quot;https://qiita-image-store.s3.amazonaws.com/0/199085/1b1523f4-4bdc-e7e4-d581-fcf16f6e8509.png&quot;&gt;</p>\n<pre><code>├ dist　　　　　　　　　　　　　　　　　　 ・圧縮した画像が置かれる　(ディストリビューションの略)\n├ gulpfile.js                        ・gulｐの設定を行う　　　　　　　　　　\n├ node_modules                       ・nodeの設定が補完される\n├ package-lock.json                  ・nodeのバージョンを表記する\n├ package.json                       ・nodeの設定を記述する\n└ src                                ・圧縮前の画像を保管する　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n</code></pre>\n<p>##11 - gulpfile.jsに下記をコピぺする</p>\n<pre><code class=\"hljs\">const gulp = require('gulp');\nconst distDir = 'dist';\nconst srcDir = 'src';\nconst imagemin = require('gulp-imagemin');\nconst pngquant = require('imagemin-pngquant');\nconst mozjpeg = require('imagemin-mozjpeg');\n\ngulp.task('img', () =&gt; {\n  return gulp.src(srcDir + '/*.{png,jpg,gif,PNG,JPG,GIF}')\n    .pipe(imagemin([\n      pngquant('65-80'),\n      mozjpeg({\n        quality: 80, \n        progressive: true\n      }),\n      imagemin.svgo(),\n      imagemin.optipng(),\n      imagemin.gifsicle()\n    ]))\n    .pipe(gulp.dest(distDir));\n});</code></pre><p>##実行</p>\n<pre><code>gulp img\n</code></pre>\n<p>###png画像を圧縮</p>\n<p>####圧縮前 (37KB)</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/199085/aea5a96c-8fe3-9cae-69e2-a76890232e1d.png\" alt=\"test.png\"></p>\n<pre><code>Using gulpfile ~/test_gulp/gulpfile.js\nStarting 'img'...\ngulp-imagemin: Minified 1 image (saved 25 kB - 67%)\nFinished 'img' after 527 ms\n</code></pre>\n<p>####圧縮後 (12KB)\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/199085/14039952-73fb-1b0f-bb63-7a9d4f5146a0.png\" alt=\"test.png\"></p>\n<p>###jpg画像を圧縮\nスマホで撮った写真を圧縮してみる。</p>\n<p>####圧縮前 (1.9MB)</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/199085/ed453547-6e43-01ef-afa3-8e6a81c2201b.jpeg\" alt=\"test.jpg\"></p>\n<pre><code>Using gulpfile ~/test_gulp/gulpfile.js\nStarting 'img'...\ngulp-imagemin: Minified 1 image (saved 25 kB - 67%)\nFinished 'img' after 571 ms\n</code></pre>\n<p>####圧縮後 (1.2MB)</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/199085/69530871-5b4e-1b28-64ed-06d9c79aed45.jpeg\" alt=\"test.jpg\"></p>\n<p>##まとめ\n画像容量を6割近く削減することができました。\nデザイナーではない素人目ですが画像の劣化などあまり気になりませんでした。</p>\n<p>・基本的に <code>gulpfile.js</code> を変更すれば設定を変更可能です。\n・細かい圧縮の設定などを変更したい場合はリンクの公式のオプションを参考にしてみてください。</p>\n<p>ここまでお読みいただきありがとうございました。</p>\n<p>雑談：iPhoneXの画質すごい</p>\n",
  "dir": "static/json/tech",
  "base": "2.json",
  "ext": ".json",
  "sourceBase": "2.md",
  "sourceExt": ".md"
}